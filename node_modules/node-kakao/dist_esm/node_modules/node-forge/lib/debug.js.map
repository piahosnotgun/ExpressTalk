{"version":3,"file":"debug.js","sources":["../../../../node_modules/node-forge/lib/debug.js"],"sourcesContent":["/**\n * Debugging support for web applications.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright 2008-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\n/* DEBUG API */\nmodule.exports = forge.debug = forge.debug || {};\n\n// Private storage for debugging.\n// Useful to expose data that is otherwise unviewable behind closures.\n// NOTE: remember that this can hold references to data and cause leaks!\n// format is \"forge._debug.<modulename>.<dataname> = data\"\n// Example:\n// (function() {\n//   var cat = 'forge.test.Test'; // debugging category\n//   var sState = {...}; // local state\n//   forge.debug.set(cat, 'sState', sState);\n// })();\nforge.debug.storage = {};\n\n/**\n * Gets debug data. Omit name for all cat data  Omit name and cat for\n * all data.\n *\n * @param cat name of debugging category.\n * @param name name of data to get (optional).\n * @return object with requested debug data or undefined.\n */\nforge.debug.get = function(cat, name) {\n  var rval;\n  if(typeof(cat) === 'undefined') {\n    rval = forge.debug.storage;\n  } else if(cat in forge.debug.storage) {\n    if(typeof(name) === 'undefined') {\n      rval = forge.debug.storage[cat];\n    } else {\n      rval = forge.debug.storage[cat][name];\n    }\n  }\n  return rval;\n};\n\n/**\n * Sets debug data.\n *\n * @param cat name of debugging category.\n * @param name name of data to set.\n * @param data data to set.\n */\nforge.debug.set = function(cat, name, data) {\n  if(!(cat in forge.debug.storage)) {\n    forge.debug.storage[cat] = {};\n  }\n  forge.debug.storage[cat][name] = data;\n};\n\n/**\n * Clears debug data. Omit name for all cat data. Omit name and cat for\n * all data.\n *\n * @param cat name of debugging category.\n * @param name name of data to clear or omit to clear entire category.\n */\nforge.debug.clear = function(cat, name) {\n  if(typeof(cat) === 'undefined') {\n    forge.debug.storage = {};\n  } else if(cat in forge.debug.storage) {\n    if(typeof(name) === 'undefined') {\n      delete forge.debug.storage[cat];\n    } else {\n      delete forge.debug.storage[cat][name];\n    }\n  }\n};\n"],"names":["require$$0"],"mappings":";;;;;;;;;;AAOA,IAAI,KAAK,GAAGA,OAAkB,CAAC;AAC/B;AACA;AACiB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,GAAG;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,SAAS,GAAG,EAAE,IAAI,EAAE;AACtC,EAAE,IAAI,IAAI,CAAC;AACX,EAAE,GAAG,OAAO,GAAG,CAAC,KAAK,WAAW,EAAE;AAClC,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;AAC/B,GAAG,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE;AACxC,IAAI,GAAG,OAAO,IAAI,CAAC,KAAK,WAAW,EAAE;AACrC,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACtC,KAAK,MAAM;AACX,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;AAC5C,KAAK;AACL,GAAG;AACH,EAAE,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,SAAS,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE;AAC5C,EAAE,GAAG,EAAE,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;AACpC,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AAClC,GAAG;AACH,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;AACxC,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,SAAS,GAAG,EAAE,IAAI,EAAE;AACxC,EAAE,GAAG,OAAO,GAAG,CAAC,KAAK,WAAW,EAAE;AAClC,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;AAC7B,GAAG,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE;AACxC,IAAI,GAAG,OAAO,IAAI,CAAC,KAAK,WAAW,EAAE;AACrC,MAAM,OAAO,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACtC,KAAK,MAAM;AACX,MAAM,OAAO,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;AAC5C,KAAK;AACL,GAAG;AACH,CAAC"}