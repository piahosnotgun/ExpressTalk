{"version":3,"file":"hmac.js","sources":["../../../../node_modules/node-forge/lib/hmac.js"],"sourcesContent":["/**\n * Hash-based Message Authentication Code implementation. Requires a message\n * digest object that can be obtained, for example, from forge.md.sha1 or\n * forge.md.md5.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2012 Digital Bazaar, Inc. All rights reserved.\n */\nvar forge = require('./forge');\nrequire('./md');\nrequire('./util');\n\n/* HMAC API */\nvar hmac = module.exports = forge.hmac = forge.hmac || {};\n\n/**\n * Creates an HMAC object that uses the given message digest object.\n *\n * @return an HMAC object.\n */\nhmac.create = function() {\n  // the hmac key to use\n  var _key = null;\n\n  // the message digest to use\n  var _md = null;\n\n  // the inner padding\n  var _ipadding = null;\n\n  // the outer padding\n  var _opadding = null;\n\n  // hmac context\n  var ctx = {};\n\n  /**\n   * Starts or restarts the HMAC with the given key and message digest.\n   *\n   * @param md the message digest to use, null to reuse the previous one,\n   *           a string to use builtin 'sha1', 'md5', 'sha256'.\n   * @param key the key to use as a string, array of bytes, byte buffer,\n   *           or null to reuse the previous key.\n   */\n  ctx.start = function(md, key) {\n    if(md !== null) {\n      if(typeof md === 'string') {\n        // create builtin message digest\n        md = md.toLowerCase();\n        if(md in forge.md.algorithms) {\n          _md = forge.md.algorithms[md].create();\n        } else {\n          throw new Error('Unknown hash algorithm \"' + md + '\"');\n        }\n      } else {\n        // store message digest\n        _md = md;\n      }\n    }\n\n    if(key === null) {\n      // reuse previous key\n      key = _key;\n    } else {\n      if(typeof key === 'string') {\n        // convert string into byte buffer\n        key = forge.util.createBuffer(key);\n      } else if(forge.util.isArray(key)) {\n        // convert byte array into byte buffer\n        var tmp = key;\n        key = forge.util.createBuffer();\n        for(var i = 0; i < tmp.length; ++i) {\n          key.putByte(tmp[i]);\n        }\n      }\n\n      // if key is longer than blocksize, hash it\n      var keylen = key.length();\n      if(keylen > _md.blockLength) {\n        _md.start();\n        _md.update(key.bytes());\n        key = _md.digest();\n      }\n\n      // mix key into inner and outer padding\n      // ipadding = [0x36 * blocksize] ^ key\n      // opadding = [0x5C * blocksize] ^ key\n      _ipadding = forge.util.createBuffer();\n      _opadding = forge.util.createBuffer();\n      keylen = key.length();\n      for(var i = 0; i < keylen; ++i) {\n        var tmp = key.at(i);\n        _ipadding.putByte(0x36 ^ tmp);\n        _opadding.putByte(0x5C ^ tmp);\n      }\n\n      // if key is shorter than blocksize, add additional padding\n      if(keylen < _md.blockLength) {\n        var tmp = _md.blockLength - keylen;\n        for(var i = 0; i < tmp; ++i) {\n          _ipadding.putByte(0x36);\n          _opadding.putByte(0x5C);\n        }\n      }\n      _key = key;\n      _ipadding = _ipadding.bytes();\n      _opadding = _opadding.bytes();\n    }\n\n    // digest is done like so: hash(opadding | hash(ipadding | message))\n\n    // prepare to do inner hash\n    // hash(ipadding | message)\n    _md.start();\n    _md.update(_ipadding);\n  };\n\n  /**\n   * Updates the HMAC with the given message bytes.\n   *\n   * @param bytes the bytes to update with.\n   */\n  ctx.update = function(bytes) {\n    _md.update(bytes);\n  };\n\n  /**\n   * Produces the Message Authentication Code (MAC).\n   *\n   * @return a byte buffer containing the digest value.\n   */\n  ctx.getMac = function() {\n    // digest is done like so: hash(opadding | hash(ipadding | message))\n    // here we do the outer hashing\n    var inner = _md.digest().bytes();\n    _md.start();\n    _md.update(_opadding);\n    _md.update(inner);\n    return _md.digest();\n  };\n  // alias for getMac\n  ctx.digest = ctx.getMac;\n\n  return ctx;\n};\n"],"names":["require$$0"],"mappings":"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"}