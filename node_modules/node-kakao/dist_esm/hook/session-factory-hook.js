class HookedSessionFactory {
    constructor(_factory, _hook = {}) {
        this._factory = _factory;
        this._hook = _hook;
    }
    async connect(userId, config) {
        const sessionRes = await this._factory.connect(userId, config);
        if (!sessionRes.success)
            return sessionRes;
        return { status: sessionRes.status, success: true, result: new InspectSession(sessionRes.result, this._hook) };
    }
}
class InspectSession {
    constructor(_session, _hook = {}) {
        this._session = _session;
        this._hook = _hook;
    }
    get stream() {
        return this._session.stream;
    }
    request(method, data) {
        if (this._hook.onRequest)
            this._hook.onRequest(method, data);
        return this._session.request(method, data);
    }
    listen() {
        const iterator = this._session.listen();
        return {
            [Symbol.asyncIterator]() {
                return this;
            },
            next: async () => {
                const next = await iterator.next();
                if (!next.done && this._hook.onData) {
                    this._hook.onData(next.value.method, next.value.data, next.value.push);
                }
                return next;
            }
        };
    }
}

export { HookedSessionFactory, InspectSession };
//# sourceMappingURL=session-factory-hook.js.map
