import { JsonUtil } from '../util/json-util.js';
import { isNode, isDeno, isBrowser } from '../util/platform.js';
import { fillCredential, fillBaseHeader, fillAHeader, getUserAgent } from './header-util.js';

class TextWebRequest {
    constructor(_client) {
        this._client = _client;
    }
    get client() {
        return this._client;
    }
    async requestText(method, path, form, headers) {
        const res = await this._client.request(method, path, form, headers);
        return new TextDecoder('utf-8').decode(res);
    }
    async requestMultipartText(method, path, form, headers) {
        const res = await this._client.requestMultipart(method, path, form, headers);
        return new TextDecoder('utf-8').decode(res);
    }
}
class DataWebRequest {
    constructor(client) {
        this._client = new TextWebRequest(client);
    }
    get client() {
        return this._client.client;
    }
    async requestData(method, path, form, headers) {
        const res = await this._client.requestText(method, path, form, headers);
        return JsonUtil.parseLoseless(res);
    }
    async requestMultipartData(method, path, form, headers) {
        const res = await this._client.requestMultipartText(method, path, form, headers);
        return JsonUtil.parseLoseless(res);
    }
}
class SessionWebClient {
    constructor(_client, _credential, config) {
        this._client = _client;
        this._credential = _credential;
        this.config = config;
    }
    fillHeader(header) {
        fillCredential(header, this._credential);
    }
    get url() {
        return this._client.url;
    }
    createSessionHeader(headers) {
        const credentialHeader = headers ? { ...headers } : {};
        this.fillHeader(credentialHeader);
        fillBaseHeader(credentialHeader, this.config);
        fillAHeader(credentialHeader, this.config);
        const userAgent = getUserAgent(this.config);
        credentialHeader['User-Agent'] = userAgent;
        return credentialHeader;
    }
    request(method, path, form, headers) {
        return this._client.request(method, path, form, this.createSessionHeader(headers));
    }
    requestMultipart(method, path, form, headers) {
        return this._client.requestMultipart(method, path, form, this.createSessionHeader(headers));
    }
}
async function createWebClient(scheme, host, decorator) {
    if (isNode()) {
        return new (await import('./axios-web-client.js')).AxiosWebClient(scheme, host, decorator);
    }
    else if (isDeno()) {
        return new (await import('./fetch-web-client.js')).FetchWebClient(scheme, host, decorator);
    }
    else if (isBrowser()) {
        return new (await import('./fetch-web-client.js')).FetchWebClient(scheme, host, decorator);
    }
    else {
        throw new Error('Unknown environment');
    }
}
async function createSessionWebClient(credential, config, scheme, host, decorator) {
    return new SessionWebClient(await createWebClient(scheme, host, decorator), credential, config);
}

export { DataWebRequest, SessionWebClient, TextWebRequest, createSessionWebClient, createWebClient };
//# sourceMappingURL=web-client.js.map
