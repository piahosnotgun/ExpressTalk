import { KnownDataStatusCode } from '../request/index.js';
import { TextWebRequest, createWebClient } from './web-client.js';

class OpenUploadApiClient {
    constructor(client) {
        this._client = new TextWebRequest(client);
    }
    async uploadLinkImage(name, file, contentType = 'image/jpeg') {
        const res = await this._client.requestText('POST', 'up/open-chat-profile', { 'file_1': { value: file, options: { filename: name, contentType: contentType } } });
        try {
            const json = JSON.parse(res);
            return { status: KnownDataStatusCode.SUCCESS, success: true, result: json };
        }
        catch (e) {
            return { status: KnownDataStatusCode.OPERATION_DENIED, success: false };
        }
    }
    async uploadLinkPostImage(name, file, contentType = 'image/jpeg') {
        const res = await this._client.requestText('POST', 'up/open-chat-profile-post', { 'file_1': { value: file, options: { filename: name, contentType: contentType } } });
        try {
            const json = JSON.parse(res);
            return { status: KnownDataStatusCode.SUCCESS, success: true, result: json };
        }
        catch (e) {
            return { status: KnownDataStatusCode.OPERATION_DENIED, success: false };
        }
    }
    static async create() {
        return new OpenUploadApiClient(await createWebClient('https', 'up-api1-kage.kakao.com'));
    }
}
var OpenUploadAPI;
(function (OpenUploadAPI) {
    let client = null;
    function getOriginalLinkImageURL(accessKey) {
        return `http://open.kakaocdn.net/dn/${accessKey}/img.jpg`;
    }
    OpenUploadAPI.getOriginalLinkImageURL = getOriginalLinkImageURL;
    function getSmallLinkImageURL(accessKey) {
        return `http://open.kakaocdn.net/dn/${accessKey}/img_s.jpg`;
    }
    OpenUploadAPI.getSmallLinkImageURL = getSmallLinkImageURL;
    function getLargeLinkImageURL(accessKey) {
        return `http://open.kakaocdn.net/dn/${accessKey}/img_l.jpg`;
    }
    OpenUploadAPI.getLargeLinkImageURL = getLargeLinkImageURL;
    async function buildProfile(nickname, profile) {
        if (!client)
            client = await OpenUploadApiClient.create();
        const res = await client.uploadLinkImage('profile.png', profile);
        if (!res.success)
            return res;
        return {
            status: KnownDataStatusCode.SUCCESS,
            success: true,
            result: { nickname, profilePath: res.result.access_key }
        };
    }
    OpenUploadAPI.buildProfile = buildProfile;
})(OpenUploadAPI || (OpenUploadAPI = {}));

export { OpenUploadAPI, OpenUploadApiClient };
//# sourceMappingURL=open-upload-api-client.js.map
