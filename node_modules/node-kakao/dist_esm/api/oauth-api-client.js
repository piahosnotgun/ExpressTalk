import { DefaultConfiguration } from '../config.js';
import { KnownDataStatusCode } from '../request/index.js';
import { fillBaseHeader, fillAHeader, fillCredential, getUserAgent } from './header-util.js';
import { DataWebRequest, createWebClient } from './web-client.js';

class OAuthApiClient {
    constructor(client, config) {
        this.config = config;
        this._client = new DataWebRequest(client);
    }
    createOAuthHeader(credential) {
        const header = {};
        fillBaseHeader(header, this.config);
        fillAHeader(header, this.config);
        fillCredential(header, credential);
        const userAgent = getUserAgent(this.config);
        header['User-Agent'] = userAgent;
        return header;
    }
    async renew(credential) {
        const res = await this._client.requestData('POST', `${this.config.agent}/account/oauth2_token.json`, {
            'grant_type': 'refresh_token',
            'access_token': credential.accessToken,
            'refresh_token': credential.refreshToken
        }, this.createOAuthHeader(credential));
        if (res.status !== KnownDataStatusCode.SUCCESS) {
            return { status: res.status, success: false };
        }
        return {
            status: res.status,
            success: true,
            result: {
                type: res['token_type'],
                credential: {
                    userId: credential.userId,
                    deviceUUID: credential.deviceUUID,
                    accessToken: res['access_token'],
                    refreshToken: res['refresh_token']
                },
                expiresIn: res['expires_in']
            }
        };
    }
    static async create(config = {}) {
        return new OAuthApiClient(await createWebClient('https', 'katalk.kakao.com'), Object.assign({ ...DefaultConfiguration }, config));
    }
}

export { OAuthApiClient };
//# sourceMappingURL=oauth-api-client.js.map
