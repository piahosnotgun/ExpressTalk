import { convertToFormData } from './web-api-util.js';

class FetchWebClient {
    constructor(scheme, host, _decorator) {
        this.scheme = scheme;
        this.host = host;
        this._decorator = _decorator;
    }
    get url() {
        return `${this.scheme}://${this.host}`;
    }
    toApiURL(path) {
        return `${this.url}/${path}`;
    }
    fillHeader(header) {
        var _a;
        header['Host'] = this.host;
        (_a = this._decorator) === null || _a === void 0 ? void 0 : _a.fillHeader(header);
    }
    buildFetchReqData(method, header) {
        const headers = {};
        this.fillHeader(headers);
        if (header)
            Object.assign(headers, header);
        const reqData = {
            headers,
            method,
        };
        return reqData;
    }
    async request(method, path, form, headers) {
        const reqData = this.buildFetchReqData(method, headers);
        const url = this.toApiURL(path);
        if (form) {
            reqData.body = convertToFormData(form);
        }
        const res = await fetch(url, reqData);
        if (!res.ok) {
            throw new Error(`Web request failed with status ${res.status} ${res.statusText}`);
        }
        return await res.arrayBuffer();
    }
    async requestMultipart(method, path, form, headers) {
        const reqData = this.buildFetchReqData(method, headers);
        const url = this.toApiURL(path);
        if (form) {
            reqData.body = this.convertToMultipart(form);
        }
        const res = await fetch(url, reqData);
        if (!res.ok) {
            throw new Error(`Web request failed with status ${res.status} ${res.statusText}`);
        }
        return await res.arrayBuffer();
    }
    convertToMultipart(form) {
        const formData = new FormData();
        for (const [key, value] of Object.entries(form)) {
            if (value && value.value && value.options) {
                const file = value;
                formData.append(key, new File([new Blob([file.value])], file.options.filename, { type: file.options.contentType }));
            }
            else {
                formData.append(key, value + '');
            }
        }
        return formData;
    }
}

export { FetchWebClient };
//# sourceMappingURL=fetch-web-client.js.map
