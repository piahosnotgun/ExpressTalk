import { DataWebRequest, createWebClient } from './web-client.js';
import { DefaultConfiguration } from '../config.js';
import { KnownDataStatusCode } from '../request/index.js';
import { fillBaseHeader, fillAHeader, getUserAgent } from './header-util.js';
import { structToLoginData } from './struct/login.js';
import './struct/friends/friend-struct.js';
import { Win32XVCProvider } from './xvc.js';

var KnownAuthStatusCode;
(function (KnownAuthStatusCode) {
    KnownAuthStatusCode[KnownAuthStatusCode["LOGIN_FAILED_REASON"] = 12] = "LOGIN_FAILED_REASON";
    KnownAuthStatusCode[KnownAuthStatusCode["TOO_MANY_TRY_LOGIN"] = 13] = "TOO_MANY_TRY_LOGIN";
    KnownAuthStatusCode[KnownAuthStatusCode["LOGIN_FAILED"] = 30] = "LOGIN_FAILED";
    KnownAuthStatusCode[KnownAuthStatusCode["MOBILE_UNREGISTERED"] = 32] = "MOBILE_UNREGISTERED";
    KnownAuthStatusCode[KnownAuthStatusCode["DEVICE_NOT_REGISTERED"] = -100] = "DEVICE_NOT_REGISTERED";
    KnownAuthStatusCode[KnownAuthStatusCode["ANOTHER_LOGON"] = -101] = "ANOTHER_LOGON";
    KnownAuthStatusCode[KnownAuthStatusCode["DEVICE_REGISTER_FAILED"] = -102] = "DEVICE_REGISTER_FAILED";
    KnownAuthStatusCode[KnownAuthStatusCode["INVALID_DEVICE_REGISTER"] = -110] = "INVALID_DEVICE_REGISTER";
    KnownAuthStatusCode[KnownAuthStatusCode["INCORRECT_PASSCODE"] = -111] = "INCORRECT_PASSCODE";
    KnownAuthStatusCode[KnownAuthStatusCode["PASSCODE_REQUEST_FAILED"] = -112] = "PASSCODE_REQUEST_FAILED";
    KnownAuthStatusCode[KnownAuthStatusCode["ACCOUNT_RESTRICTED"] = -997] = "ACCOUNT_RESTRICTED";
})(KnownAuthStatusCode || (KnownAuthStatusCode = {}));
class AuthApiClient {
    constructor(client, _name, _deviceUUID, config, xvcProvider) {
        this._name = _name;
        this._deviceUUID = _deviceUUID;
        this.config = config;
        this.xvcProvider = xvcProvider;
        this._client = new DataWebRequest(client);
    }
    get name() {
        return this._name;
    }
    get deviceUUID() {
        return this._deviceUUID;
    }
    async createAuthHeader(form) {
        const header = {};
        fillBaseHeader(header, this.config);
        fillAHeader(header, this.config);
        const userAgent = getUserAgent(this.config);
        header['User-Agent'] = userAgent;
        header['X-VC'] = await this.calculateXVCKey(this.deviceUUID, userAgent, form.email);
        return header;
    }
    fillAuthForm(form) {
        form['device_uuid'] = this._deviceUUID;
        form['device_name'] = this._name;
        if (this.config.deviceModel) {
            form['model_name'] = this.config.deviceModel;
        }
        return form;
    }
    async login(form) {
        const res = await this._client.requestData('POST', this.getApiPath('login.json'), this.fillAuthForm({ ...form }), await this.createAuthHeader(form));
        if (res.status !== KnownDataStatusCode.SUCCESS)
            return { status: res.status, success: false };
        return {
            status: res.status,
            success: true,
            result: structToLoginData(res, this._deviceUUID),
        };
    }
    async loginToken(form) {
        const res = await this._client.requestData('POST', this.getApiPath('login.json'), this.fillAuthForm({ ...form, auto_login: true }), await this.createAuthHeader(form));
        if (res.status !== KnownDataStatusCode.SUCCESS)
            return { status: res.status, success: false };
        return {
            status: res.status,
            success: true,
            result: structToLoginData(res, this._deviceUUID),
        };
    }
    async requestPasscode(form) {
        const res = await this._client.requestData('POST', this.getApiPath('request_passcode.json'), this.fillAuthForm({ ...form }), await this.createAuthHeader(form));
        return { status: res.status, success: res.status === KnownDataStatusCode.SUCCESS };
    }
    async registerDevice(form, passcode, permanent = true) {
        const res = await this._client.requestData('POST', this.getApiPath('register_device.json'), this.fillAuthForm({ ...form, passcode, permanent }), await this.createAuthHeader(form));
        return { status: res.status, success: res.status === KnownDataStatusCode.SUCCESS };
    }
    async calculateXVCKey(deviceUUID, userAgent, email) {
        return (await this.xvcProvider.toFullXVCKey(deviceUUID, userAgent, email)).substring(0, 16);
    }
    getApiPath(api) {
        return `${this.config.agent}/account/${api}`;
    }
    static async create(name, deviceUUID, config = {}, xvcProvider) {
        return new AuthApiClient(await createWebClient('https', 'katalk.kakao.com'), name, deviceUUID, Object.assign({ ...DefaultConfiguration }, config), xvcProvider ? xvcProvider : Win32XVCProvider);
    }
}

export { AuthApiClient, KnownAuthStatusCode };
//# sourceMappingURL=auth-api-client.js.map
