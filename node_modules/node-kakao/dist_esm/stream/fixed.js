class FixedReadStream {
    constructor(_stream, _size) {
        this._stream = _stream;
        this._size = _size;
        this._read = 0;
    }
    get size() {
        return this._size;
    }
    get readSize() {
        return this._read;
    }
    get done() {
        return this._read >= this._size;
    }
    async read(buffer) {
        if (this.done)
            return 0;
        let view = buffer;
        if (this._read + view.byteLength > this._size) {
            view = buffer.subarray(0, this._size - this._read);
        }
        const read = await this._stream.read(view);
        if (read)
            this._read += read;
        return read;
    }
    get ended() {
        return this._stream.ended;
    }
    close() {
        this._stream.close();
    }
}
class FixedWriteStream {
    constructor(_stream, _size) {
        this._stream = _stream;
        this._size = _size;
        this._written = 0;
    }
    get size() {
        return this._size;
    }
    get done() {
        return this._written >= this._size;
    }
    get written() {
        return this._written;
    }
    async write(data) {
        if (this.done)
            return 0;
        let view = data;
        if (this._written + view.byteLength > this._size) {
            view = data.subarray(0, Math.max(this._size - this._written, 0));
        }
        const written = await this._stream.write(view);
        this._written += written;
        return written;
    }
    get ended() {
        return this._stream.ended;
    }
    close() {
        this._stream.close();
    }
}

export { FixedReadStream, FixedWriteStream };
//# sourceMappingURL=fixed.js.map
