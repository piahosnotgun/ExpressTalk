export { FixedReadStream, FixedWriteStream } from './fixed.js';

var ReadStreamUtil;
(function (ReadStreamUtil) {
    function iter(stream, size = 65535) {
        return {
            [Symbol.asyncIterator]() {
                return this;
            },
            async next() {
                const buffer = new Uint8Array(size);
                const read = await stream.read(buffer);
                if (!read)
                    return { done: true, value: null };
                return { done: false, value: buffer.subarray(0, read) };
            }
        };
    }
    ReadStreamUtil.iter = iter;
    async function all(stream) {
        const bufferList = [];
        let total = 0;
        for await (const buffer of iter(stream)) {
            bufferList.push(buffer);
            total += buffer.byteLength;
        }
        const data = new Uint8Array(total);
        let offset = 0;
        for (const buffer of bufferList) {
            data.set(buffer, offset);
            offset += buffer.byteLength;
        }
        return data;
    }
    ReadStreamUtil.all = all;
    async function exact(stream, size) {
        const data = new Uint8Array(size);
        let read = await stream.read(data);
        if (!read)
            return null;
        while (read < size) {
            const dataRead = await stream.read(data.subarray(read));
            if (!dataRead)
                return null;
            read += dataRead;
        }
        return data;
    }
    ReadStreamUtil.exact = exact;
    async function copy(read, write) {
        let written = 0;
        for await (const data of iter(read)) {
            if (write.ended)
                break;
            written += await write.write(data);
        }
        return written;
    }
    ReadStreamUtil.copy = copy;
})(ReadStreamUtil || (ReadStreamUtil = {}));

export { ReadStreamUtil };
//# sourceMappingURL=index.js.map
