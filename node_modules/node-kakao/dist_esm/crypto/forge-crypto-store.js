import lib from '../node_modules/node-forge/lib/index.js';

async function createForgeCrypto(pubKey) {
    const publicKey = lib.pki.publicKeyFromPem(pubKey);
    const key = lib.random.getBytesSync(16);
    return {
        toAESEncrypted(buffer, iv) {
            const cipher = lib.cipher.createCipher('AES-CFB', key);
            cipher.start({ iv: lib.util.binary.raw.encode(iv) });
            cipher.update(new lib.util.ByteStringBuffer(buffer));
            cipher.finish();
            const array = lib.util.binary.raw.decode(cipher.output.data);
            return array;
        },
        toAESDecrypted(buffer, iv) {
            const cipher = lib.cipher.createDecipher('AES-CFB', key);
            cipher.start({ iv: lib.util.binary.raw.encode(iv) });
            cipher.update(new lib.util.ByteStringBuffer(buffer));
            const array = lib.util.binary.raw.decode(cipher.output.data);
            return array;
        },
        toRSAEncrypted(buffer) {
            const encrypted = publicKey.encrypt(new lib.util.ByteStringBuffer(buffer).data, 'RSA-OAEP');
            return lib.util.binary.raw.decode(encrypted);
        },
        randomCipherIV() {
            const buffer = new Uint8Array(16);
            lib.util.binary.raw.decode(lib.random.getBytesSync(16), buffer);
            return buffer;
        },
        getRSAEncryptedKey() {
            const encrypted = publicKey.encrypt(new lib.util.ByteStringBuffer(key).data, 'RSA-OAEP');
            return lib.util.binary.raw.decode(encrypted);
        },
    };
}

export { createForgeCrypto };
//# sourceMappingURL=forge-crypto-store.js.map
