import '../../chat/attachment/post.js';
import { KnownChatType } from '../../chat/chat-type.js';
import { feedFromChat } from '../../chat/feed/chat-feed.js';
import '../../chat/feed/feed-type.js';
import '../../packet/struct/chat.js';
import '../../channel/channel-info.js';
import '../../channel/meta.js';
import '../../openlink/index.js';
import { structToChatlog } from '../../packet/struct/wrap/chat.js';
import '../../user/user-type.js';

class TalkNormalChannelHandler {
    constructor(_channel, _session, _emitter, _store, _chatListStore) {
        this._channel = _channel;
        this._session = _session;
        this._emitter = _emitter;
        this._store = _store;
        this._chatListStore = _chatListStore;
    }
    _callEvent(parentCtx, event, ...args) {
        this._emitter.emit(event, ...args);
        parentCtx.emit(event, ...args);
    }
    _userJoinHandler(data, parentCtx) {
        const struct = data['chatLog'];
        if (!this._channel.channelId.eq(struct.chatId))
            return;
        const chatLog = structToChatlog(struct);
        if (chatLog.type === KnownChatType.FEED) {
            const feed = feedFromChat(chatLog);
            let userList;
            if ('member' in feed) {
                userList = [feed.member];
            }
            else if ('members' in feed) {
                userList = feed.members;
            }
            else {
                userList = [];
            }
            this._session.getLatestUserInfo(...userList).then((usersRes) => {
                if (!usersRes.success)
                    return;
                for (const user of usersRes.result) {
                    this._store.updateUserInfo(user, user);
                    this._callEvent(parentCtx, 'user_join', chatLog, this._channel, user, feed);
                }
            });
        }
        this._chatListStore.addChat(chatLog).then();
    }
    pushReceived(method, data, parentCtx) {
        switch (method) {
            case 'NEWMEM':
                this._userJoinHandler(data, parentCtx);
                break;
        }
    }
}

export { TalkNormalChannelHandler };
//# sourceMappingURL=talk-normal-channel-handler.js.map
