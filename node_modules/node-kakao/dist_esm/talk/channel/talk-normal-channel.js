import { TalkNormalChannelSession } from './talk-normal-channel-session.js';
import { TypedEmitter } from '../../event/typed.js';
import { TalkChannelHandler } from './talk-channel-handler.js';
import { KnownChannelMetaType } from '../../channel/meta.js';
import { JsonUtil } from '../../util/json-util.js';
import { TalkNormalChannelDataSession } from './talk-normal-channel-data-session.js';
import { TalkChannelDataSession } from './talk-channel-data-session.js';
import { TalkChannelSession } from './talk-channel-session.js';
import { TalkNormalChannelHandler } from './talk-normal-channel-handler.js';
import { sendMedia, sendMultiMedia } from './common.js';

class TalkNormalChannel extends TypedEmitter {
    constructor(_channel, session, store, _chatListStore) {
        super();
        this._channel = _channel;
        this._chatListStore = _chatListStore;
        this._channelSession = new TalkChannelDataSession(session.clientUser, new TalkChannelSession(this, session), store, _chatListStore);
        const normalSession = new TalkNormalChannelSession(this, session);
        this._normalChannelSession = new TalkNormalChannelDataSession(session.clientUser, normalSession, store);
        this._handler = new TalkChannelHandler(this, this, store, _chatListStore);
        this._normalHandler = new TalkNormalChannelHandler(this, normalSession, this, store, _chatListStore);
    }
    get clientUser() {
        return this._normalChannelSession.clientUser;
    }
    get channelId() {
        return this._channel.channelId;
    }
    get chatListStore() {
        return this._chatListStore;
    }
    get store() {
        return this._normalChannelSession.store;
    }
    get info() {
        return this.store.info;
    }
    get userCount() {
        return this.store.userCount;
    }
    getName() {
        const nameMeta = this.info.metaMap[KnownChannelMetaType.TITLE];
        return nameMeta && nameMeta.content || '';
    }
    getDisplayName() {
        return this.getName() || this.info.displayUserList.map((user) => user.nickname).join(', ');
    }
    getUserInfo(user) {
        return this._normalChannelSession.store.getUserInfo(user);
    }
    getAllUserInfo() {
        return this._normalChannelSession.store.getAllUserInfo();
    }
    getReadCount(chat) {
        return this.store.getReadCount(chat);
    }
    getReaders(chat) {
        return this.store.getReaders(chat);
    }
    sendChat(chat, noSeen) {
        return this._channelSession.sendChat(chat, noSeen);
    }
    forwardChat(chat, noSeen) {
        return this._channelSession.forwardChat(chat, noSeen);
    }
    deleteChat(chat) {
        return this._channelSession.deleteChat(chat);
    }
    markRead(chat) {
        return this._channelSession.markRead(chat);
    }
    setMeta(type, meta) {
        return this._channelSession.setMeta(type, meta);
    }
    setTitleMeta(title) {
        return this.setMeta(KnownChannelMetaType.TITLE, title);
    }
    setNoticeMeta(notice) {
        return this.setMeta(KnownChannelMetaType.NOTICE, notice);
    }
    setProfileMeta(content) {
        return this.setMeta(KnownChannelMetaType.PROFILE, JsonUtil.stringifyLoseless(content));
    }
    setTvMeta(content) {
        return this.setMeta(KnownChannelMetaType.TV, JsonUtil.stringifyLoseless(content));
    }
    setTvLiveMeta(content) {
        return this.setMeta(KnownChannelMetaType.TV_LIVE, JsonUtil.stringifyLoseless(content));
    }
    setLiveTalkInfoMeta(content) {
        return this.setMeta(KnownChannelMetaType.LIVE_TALK_INFO, JsonUtil.stringifyLoseless(content));
    }
    setLiveTalkCountMeta(content) {
        return this.setMeta(KnownChannelMetaType.LIVE_TALK_COUNT, JsonUtil.stringifyLoseless(content));
    }
    setGroupMeta(content) {
        return this.setMeta(KnownChannelMetaType.GROUP, JsonUtil.stringifyLoseless(content));
    }
    setPushAlert(flag) {
        return this._channelSession.setPushAlert(flag);
    }
    inviteUsers(users) {
        return this._normalChannelSession.inviteUsers(users);
    }
    syncChatList(endLogId, startLogId) {
        return this._channelSession.syncChatList(endLogId, startLogId);
    }
    getChatListFrom(startLogId) {
        return this._channelSession.getChatListFrom(startLogId);
    }
    async chatON() {
        return this._normalChannelSession.chatON();
    }
    async getLatestChannelInfo() {
        return this._normalChannelSession.getLatestChannelInfo();
    }
    async getLatestUserInfo(...users) {
        return this._normalChannelSession.getLatestUserInfo(...users);
    }
    async getAllLatestUserInfo() {
        return this._normalChannelSession.getAllLatestUserInfo();
    }
    downloadMedia(media, type, offset) {
        return this._channelSession.downloadMedia(media, type, offset);
    }
    downloadMediaThumb(media, type, offset) {
        return this._channelSession.downloadMediaThumb(media, type, offset);
    }
    uploadMedia(type, form) {
        return this._channelSession.uploadMedia(type, form);
    }
    uploadMultiMedia(type, forms) {
        return this._channelSession.uploadMultiMedia(type, forms);
    }
    sendMedia(type, template) {
        return sendMedia(this._channelSession, type, template);
    }
    sendMultiMedia(type, templates) {
        return sendMultiMedia(this._channelSession, type, templates);
    }
    async updateAll() {
        const infoRes = await this.getLatestChannelInfo();
        if (!infoRes.success)
            return infoRes;
        return this.chatON();
    }
    pushReceived(method, data, parentCtx) {
        this._handler.pushReceived(method, data, parentCtx);
        this._normalHandler.pushReceived(method, data, parentCtx);
    }
}

export { TalkNormalChannel };
//# sourceMappingURL=talk-normal-channel.js.map
