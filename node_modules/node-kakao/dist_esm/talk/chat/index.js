import '../../chat/attachment/post.js';
import { getOriginalType, isDeletedChat } from '../../chat/chat-type.js';
import '../../util/json-util.js';
import '../../chat/feed/feed-type.js';

class TalkChatData {
    constructor(_chat) {
        this._chat = _chat;
    }
    get text() {
        return this._chat.text || '';
    }
    get sendAt() {
        return new Date(this._chat.sendAt);
    }
    get chat() {
        return this._chat;
    }
    get originalType() {
        return getOriginalType(this._chat.type);
    }
    get urls() {
        if (!this._chat.attachment || !Array.isArray(this._chat.attachment['urls']))
            return [];
        return this._chat.attachment['urls'];
    }
    get mentions() {
        if (!this._chat.attachment || !Array.isArray(this._chat.attachment['mentions']))
            return [];
        return this._chat.attachment.mentions;
    }
    get isShout() {
        if (!this._chat.attachment)
            return false;
        return !!this._chat.attachment.shout;
    }
    get medias() {
        const attachment = this._chat.attachment;
        if (!attachment)
            return [];
        if (Array.isArray(attachment['kl']) &&
            Array.isArray(attachment['sl']) &&
            Array.isArray(attachment['imageUrls'])) {
            const keyList = attachment['kl'];
            const sizeList = attachment['sl'];
            const urlList = attachment['imageUrls'];
            return keyList.map((key, index) => {
                return {
                    key,
                    size: sizeList[index],
                    url: urlList[index],
                };
            });
        }
        else if (attachment['k'] || attachment['tk']) {
            const size = (attachment['s'] || attachment['size']);
            const url = attachment['url'];
            return [
                {
                    key: (attachment['k'] || attachment['tk']),
                    size,
                    url,
                },
            ];
        }
        return [];
    }
    getSenderInfo(channel) {
        return channel.getUserInfo(this._chat.sender);
    }
    attachment() {
        if (!this._chat.attachment)
            return {};
        return this._chat.attachment;
    }
    forwardTo(channel) {
        channel.sendChat(this._chat);
    }
    isDeleted() {
        return isDeletedChat(this._chat.type);
    }
    isMentioned(...users) {
        const mentions = this.mentions;
        if (mentions.length < 1)
            return false;
        for (const mention of mentions) {
            const userId = mention.user_id;
            for (const user of users) {
                if (user.userId.eq(userId))
                    return true;
            }
        }
        return false;
    }
}

export { TalkChatData };
//# sourceMappingURL=index.js.map
