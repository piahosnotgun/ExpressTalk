import { newCryptoStore } from '../../crypto/index.js';
import '../../stream/index.js';
import { LocoSecureLayer } from '../../network/loco-secure-layer.js';
import { LocoSession } from '../../network/request-session.js';
import { createTLSSocket, createTCPSocket } from '../../network/socket/index.js';
import { getBookingData, getCheckinData } from '../../network/util/loco-entrance.js';
import { KnownDataStatusCode } from '../../request/index.js';

class TalkSessionFactory {
    async getConf(config) {
        const bookingStream = await createTLSSocket({
            host: config.locoBookingHost,
            port: config.locoBookingPort,
            keepAlive: false,
        });
        return getBookingData(bookingStream, config);
    }
    async getCheckin(userId, config) {
        let checkinStream;
        const checkinCrypto = await newCryptoStore(config.locoPEMPublicKey);
        try {
            const conf = await this.getConf(config);
            if (!conf.success)
                return conf;
            checkinStream = new LocoSecureLayer(await createTCPSocket({
                host: conf.result.ticket.lsl[0],
                port: conf.result.wifi.ports[0],
                keepAlive: false,
            }), checkinCrypto);
        }
        catch (e) {
            if (!config.locoCheckinFallbackHost || !config.locoCheckinFallbackPort)
                throw e;
            checkinStream = new LocoSecureLayer(await createTCPSocket({
                host: config.locoCheckinFallbackHost,
                port: config.locoCheckinFallbackPort,
                keepAlive: false,
            }), checkinCrypto);
        }
        return getCheckinData(checkinStream, config, userId);
    }
    async connect(userId, config) {
        const checkinRes = await this.getCheckin(userId, config);
        if (!checkinRes.success)
            return checkinRes;
        const locoStream = new LocoSecureLayer(await createTCPSocket({
            host: checkinRes.result.host,
            port: checkinRes.result.port,
            keepAlive: true,
        }), await newCryptoStore(config.locoPEMPublicKey));
        return { status: KnownDataStatusCode.SUCCESS, success: true, result: new LocoSession(locoStream) };
    }
}

export { TalkSessionFactory };
//# sourceMappingURL=index.js.map
