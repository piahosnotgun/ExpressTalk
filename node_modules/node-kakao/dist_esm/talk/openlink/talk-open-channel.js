import { TypedEmitter } from '../../event/typed.js';
import { KnownDataStatusCode } from '../../request/index.js';
import { sendMedia, sendMultiMedia } from '../channel/common.js';
import { TalkChannelHandler } from '../channel/talk-channel-handler.js';
import { TalkChannelSession } from '../channel/talk-channel-session.js';
import { TalkChannelDataSession } from '../channel/talk-channel-data-session.js';
import '../../packet/struct/chat.js';
import '../../channel/channel-info.js';
import { KnownChannelMetaType } from '../../channel/meta.js';
import '../../openlink/index.js';
import { JsonUtil } from '../../util/json-util.js';
import '../../user/user-type.js';
import '../../node_modules/bson/dist/bson.browser.esm.js';
import '../../chat/attachment/post.js';
import '../../chat/chat-type.js';
import '../../chat/feed/feed-type.js';
import { TalkOpenChannelSession } from './talk-open-channel-session.js';
import { TalkOpenChannelHandler } from './talk-open-channel-handler.js';
import { TalkOpenChannelDataSession } from './talk-open-channel-data-session.js';

class TalkOpenChannel extends TypedEmitter {
    constructor(_channel, session, store, _chatListStore) {
        super();
        this._channel = _channel;
        this._chatListStore = _chatListStore;
        this._channelSession = new TalkChannelDataSession(session.clientUser, new TalkChannelSession(this, session), store, _chatListStore);
        const openSession = new TalkOpenChannelSession(this, session);
        this._openChannelSession = new TalkOpenChannelDataSession(session.clientUser, openSession, store);
        this._handler = new TalkChannelHandler(this, this, store, _chatListStore);
        this._openHandler = new TalkOpenChannelHandler(this, openSession, this, store, _chatListStore);
    }
    get clientUser() {
        return this._openChannelSession.clientUser;
    }
    get channelId() {
        return this._channel.channelId;
    }
    get chatListStore() {
        return this._chatListStore;
    }
    get store() {
        return this._openChannelSession.store;
    }
    get linkId() {
        return this.store.info.linkId;
    }
    get info() {
        return this.store.info;
    }
    get userCount() {
        return this.store.userCount;
    }
    getName() {
        const nameMeta = this.info.metaMap[KnownChannelMetaType.TITLE];
        return nameMeta && nameMeta.content || '';
    }
    getDisplayName() {
        var _a;
        return this.getName() || ((_a = this.info.openLink) === null || _a === void 0 ? void 0 : _a.linkName) || '';
    }
    getUserInfo(user) {
        return this.store.getUserInfo(user);
    }
    getAllUserInfo() {
        return this.store.getAllUserInfo();
    }
    getReadCount(chat) {
        return this.store.getReadCount(chat);
    }
    getReaders(chat) {
        return this.store.getReaders(chat);
    }
    async sendChat(chat, noSeen) {
        return await this._channelSession.sendChat(chat, noSeen);
    }
    forwardChat(chat, noSeen) {
        return this._channelSession.forwardChat(chat, noSeen);
    }
    deleteChat(chat) {
        return this._channelSession.deleteChat(chat);
    }
    async inviteUsers() {
        return { success: false, status: KnownDataStatusCode.OPERATION_DENIED };
    }
    syncChatList(endLogId, startLogId) {
        return this._channelSession.syncChatList(endLogId, startLogId);
    }
    getChatListFrom(startLogId) {
        return this._channelSession.getChatListFrom(startLogId);
    }
    markRead(chat) {
        return this._openChannelSession.markRead(chat);
    }
    setMeta(type, meta) {
        return this._channelSession.setMeta(type, meta);
    }
    setTitleMeta(title) {
        return this.setMeta(KnownChannelMetaType.TITLE, title);
    }
    setNoticeMeta(notice) {
        return this.setMeta(KnownChannelMetaType.NOTICE, notice);
    }
    setPrivilegeMeta(content) {
        return this.setMeta(KnownChannelMetaType.PRIVILEGE, JsonUtil.stringifyLoseless(content));
    }
    setProfileMeta(content) {
        return this.setMeta(KnownChannelMetaType.PROFILE, JsonUtil.stringifyLoseless(content));
    }
    setTvMeta(content) {
        return this.setMeta(KnownChannelMetaType.TV, JsonUtil.stringifyLoseless(content));
    }
    setTvLiveMeta(content) {
        return this.setMeta(KnownChannelMetaType.TV_LIVE, JsonUtil.stringifyLoseless(content));
    }
    setLiveTalkInfoMeta(content) {
        return this.setMeta(KnownChannelMetaType.LIVE_TALK_INFO, JsonUtil.stringifyLoseless(content));
    }
    setLiveTalkCountMeta(content) {
        return this.setMeta(KnownChannelMetaType.LIVE_TALK_COUNT, JsonUtil.stringifyLoseless(content));
    }
    setGroupMeta(content) {
        return this.setMeta(KnownChannelMetaType.GROUP, JsonUtil.stringifyLoseless(content));
    }
    setBotMeta(content) {
        return this.setMeta(KnownChannelMetaType.BOT, JsonUtil.stringifyLoseless(content));
    }
    setPushAlert(flag) {
        return this._channelSession.setPushAlert(flag);
    }
    chatON() {
        return this._openChannelSession.chatON();
    }
    getLatestChannelInfo() {
        return this._openChannelSession.getLatestChannelInfo();
    }
    getLatestUserInfo(...users) {
        return this._openChannelSession.getLatestUserInfo(...users);
    }
    getAllLatestUserInfo() {
        return this._openChannelSession.getAllLatestUserInfo();
    }
    getLatestOpenLink() {
        return this._openChannelSession.getLatestOpenLink();
    }
    createEvent(chat, type, count) {
        return this._openChannelSession.createEvent(chat, type, count);
    }
    getKickList() {
        return this._openChannelSession.getKickList();
    }
    removeKicked(user) {
        return this._openChannelSession.removeKicked(user);
    }
    setUserPerm(user, perm) {
        return this._openChannelSession.setUserPerm(user, perm);
    }
    handoverHost(user) {
        return this._openChannelSession.handoverHost(user);
    }
    kickUser(user) {
        return this._openChannelSession.kickUser(user);
    }
    blockUser(user) {
        return this._openChannelSession.blockUser(user);
    }
    react(flag) {
        return this._openChannelSession.react(flag);
    }
    getReaction() {
        return this._openChannelSession.getReaction();
    }
    changeProfile(profile) {
        return this._openChannelSession.changeProfile(profile);
    }
    hideChat(chat) {
        return this._openChannelSession.hideChat(chat);
    }
    downloadMedia(media, type, offset) {
        return this._channelSession.downloadMedia(media, type, offset);
    }
    downloadMediaThumb(media, type, offset) {
        return this._channelSession.downloadMediaThumb(media, type, offset);
    }
    uploadMedia(type, form) {
        return this._channelSession.uploadMedia(type, form);
    }
    uploadMultiMedia(type, forms) {
        return this._channelSession.uploadMultiMedia(type, forms);
    }
    sendMedia(type, template) {
        return sendMedia(this._channelSession, type, template);
    }
    sendMultiMedia(type, templates) {
        return sendMultiMedia(this._channelSession, type, templates);
    }
    async updateAll() {
        const infoRes = await this.getLatestChannelInfo();
        if (!infoRes.success)
            return infoRes;
        const linkRes = await this.getLatestOpenLink();
        if (!linkRes.success)
            return linkRes;
        return this.chatON();
    }
    pushReceived(method, data, parentCtx) {
        this._handler.pushReceived(method, data, parentCtx);
        this._openHandler.pushReceived(method, data, parentCtx);
    }
}

export { TalkOpenChannel };
//# sourceMappingURL=talk-open-channel.js.map
