import '../../packet/struct/chat.js';
import '../../channel/channel-info.js';
import '../../channel/meta.js';
import '../../openlink/index.js';
import '../../util/json-util.js';
import { structToOpenLink, structToOpenLinkInfo } from '../../packet/struct/wrap/openlink.js';
import '../../user/user-type.js';

class TalkOpenLinkHandler {
    constructor(_service, _emitter, _updater) {
        this._service = _service;
        this._emitter = _emitter;
        this._updater = _updater;
    }
    _callEvent(parentCtx, event, ...args) {
        this._emitter.emit(event, ...args);
        parentCtx.emit(event, ...args);
    }
    pushReceived(method, data, parentCtx) {
        switch (method) {
            case 'SYNCLINKCR': {
                const linkStruct = data['ol'];
                const informed = {
                    openLink: structToOpenLink(linkStruct),
                    info: structToOpenLinkInfo(linkStruct),
                };
                this._updater.addClientLink(informed);
                this._callEvent(parentCtx, 'link_created', informed);
                break;
            }
            case 'SYNCLINKDL': {
                const linkId = data['li'];
                const clientLink = this._service.getClientLink(linkId);
                if (!clientLink)
                    return;
                this._updater.deleteClientLink(linkId);
                this._callEvent(parentCtx, 'link_deleted', clientLink);
                break;
            }
        }
    }
}

export { TalkOpenLinkHandler };
//# sourceMappingURL=talk-open-link-handler.js.map
