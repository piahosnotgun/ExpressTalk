import { EventContext } from '../event/event-context.js';
import { TypedEmitter } from '../event/typed.js';
import { ChainedIterator } from '../util/chained-iterator.js';
import '../util/json-util.js';
import '../chat/attachment/post.js';
import '../chat/chat-type.js';
import '../chat/feed/feed-type.js';
import '../openlink/index.js';
import '../packet/struct/chat.js';
import '../channel/channel-info.js';
import '../channel/meta.js';
import '../user/user-type.js';
import { TalkOpenChannelList } from './openlink/talk-open-channel-list.js';
import '../request/index.js';
import '../node_modules/bson/dist/bson.browser.esm.js';
import '../node_modules/hash-wasm/dist/index.esm.js';
import '../stream/index.js';
import 'buffer';
import '../packet/chat/kickout.js';
import { TalkNormalChannelList } from './channel/talk-normal-channel-list.js';

class TalkChannelList extends TypedEmitter {
    constructor(session, loader, normalList = [], openList = [], clientLinkList = []) {
        super();
        this._normal = new TalkNormalChannelList(session, loader, normalList);
        this._open = new TalkOpenChannelList(session, loader, openList, clientLinkList);
    }
    get size() {
        return this._normal.size + this._open.size;
    }
    get normal() {
        return this._normal;
    }
    get open() {
        return this._open;
    }
    get(channelId) {
        return this._normal.get(channelId) || this._open.get(channelId);
    }
    all() {
        const normalIter = this._normal.all();
        const openIter = this._open.all();
        return new ChainedIterator(normalIter, openIter);
    }
    pushReceived(method, data, parentCtx) {
        const ctx = new EventContext(this, parentCtx);
        if (method === 'MSG') {
            const msgData = data;
            if (!this.get(msgData.chatId)) {
                let list;
                if ('li' in msgData) {
                    list = this._open;
                }
                else {
                    list = this._normal;
                }
                list.addChannel({ channelId: msgData.chatId }).then((res) => {
                    if (!res.success)
                        return;
                    ctx.emit('channel_added', res.result);
                    this._normal.pushReceived(method, data, ctx);
                    this._open.pushReceived(method, data, ctx);
                });
                return;
            }
        }
        this._normal.pushReceived(method, data, ctx);
        this._open.pushReceived(method, data, ctx);
    }
    static async initialize(talkChannelList, channelList = []) {
        const [normalList, openList] = TalkChannelList.mapChannelList(channelList);
        await Promise.all([
            TalkNormalChannelList.initialize(talkChannelList._normal, normalList),
            TalkOpenChannelList.initialize(talkChannelList._open, openList),
        ]);
        return talkChannelList;
    }
    static mapChannelList(channelList) {
        const normalList = [];
        const openList = [];
        channelList.forEach((data) => {
            if ('linkId' in data.channel) {
                openList.push(data);
            }
            else {
                normalList.push(data);
            }
        });
        return [normalList, openList];
    }
}

export { TalkChannelList };
//# sourceMappingURL=talk-channel-list.js.map
